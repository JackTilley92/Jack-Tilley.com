"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _invariant = require("invariant");

var _invariant2 = _interopRequireDefault(_invariant);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _glReactDom = require("gl-react-dom");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Component = _react2.default.Component;
var PropTypes = _react2.default.PropTypes;
var Children = _react2.default.Children;


var pendings = [];
var nbRenderings = 0;

var GLStaticContainer = function (_Component) {
  _inherits(GLStaticContainer, _Component);

  function GLStaticContainer(props) {
    _classCallCheck(this, GLStaticContainer);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(GLStaticContainer).call(this, props));

    _this.pendingCheckLoad = function (triggersReload) {
      if (_this._frozen) return;
      if (nbRenderings < _this.props.maximumConcurrent && _this.isPending()) {
        _this.removePending();
        _this.addRendering();
        if (triggersReload) {
          _this._frozen = true;
          _this._timeout = setTimeout(function () {
            _this._frozen = false;
            _this.setState({ renderingId: _this.state.renderingId + 1 });
          }, _this.props.timeout);
        } else {
          _this.setState({ renderingId: _this.state.renderingId + 1 });
        }
      }
    };

    _this.renderingCheckLoad = function () {
      if (_this._frozen) return;
      if (_this._loaded && _this._surface && _this.isRendering()) {
        if (!_this.state.shouldUpdate) {
          if (!_this.state.framePendingLoad) {
            _this._frozen = true;
            _this._surface.captureFrame({ format: _glReactDom.toBlobSupported ? "blob" : "base64" }).then(_glReactDom.toBlobSupported ? function (frameBlob) {
              return URL.createObjectURL(frameBlob);
            } : function (frame) {
              return frame;
            }).then(function (frame) {
              _this._frozen = false;
              _this.setState({
                frame: frame,
                frameId: _this.state.frameId + 1,
                framePendingLoad: true
              });
            });
          }
        } else {
          var frame = _this.state.frame;

          if (frame) {
            if (frame && _glReactDom.toBlobSupported) {
              URL.revokeObjectURL(frame);
            }
            _this.setState({ frame: null, frameBlob: null });
          }
        }
      }
    };

    _this.onFrameLoad = function () {
      _this.removeRendering();
      _this.setState({ framePendingLoad: false });
      pendings.forEach(function (p) {
        return p.pendingCheckLoad(true);
      });
    };

    _this.state = {
      frame: null,
      frameId: 1,
      framePendingLoad: false,
      shouldUpdate: false,
      renderingId: 1
    };
    _this._pending = false;
    _this._rendering = false;
    return _this;
  }

  _createClass(GLStaticContainer, [{
    key: "addPending",
    value: function addPending(init) {
      if (!this._pending) {
        if (init) pendings.push(this);else pendings.unshift(this);
        this._pending = true;
      }
    }
  }, {
    key: "removePending",
    value: function removePending() {
      if (this._pending) {
        var i = pendings.indexOf(this);
        if (i !== -1) pendings.splice(i, 1);
        this._pending = false;
      }
    }
  }, {
    key: "isPending",
    value: function isPending() {
      return this._pending;
    }
  }, {
    key: "addRendering",
    value: function addRendering() {
      if (!this._rendering) {
        nbRenderings++;
        this._rendering = true;
      }
    }
  }, {
    key: "removeRendering",
    value: function removeRendering() {
      if (this._rendering) {
        nbRenderings--;
        this._rendering = false;
      }
    }
  }, {
    key: "isRendering",
    value: function isRendering() {
      return this._rendering;
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      this.addPending(true);
      this.pendingCheckLoad();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.removePending();
      this.removeRendering();
      if (this._timeout) clearTimeout(this._timeout);
      if (this._shouldUpdateTimeout) clearTimeout(this._shouldUpdateTimeout);
      if (this.state.frame && _glReactDom.toBlobSupported) {
        URL.revokeObjectURL(this.state.frame);
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(_ref) {
      var propsShouldUpdate = _ref.shouldUpdate;

      var shouldUpdate = this.syncShouldUpdate(!!propsShouldUpdate);
      if (!this.isRendering()) {
        if (shouldUpdate) this.addPending();
        this.pendingCheckLoad();
      }
      this.renderingCheckLoad();
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      var state = this.state;
      return !this._frozen && (nextProps.shouldUpdate || nextState.frame !== state.frame || nextState.frameId !== state.frameId || nextState.framePendingLoad !== state.framePendingLoad || nextState.renderingId !== state.renderingId || nextState.shouldUpdate !== state.shouldUpdate);
    }
  }, {
    key: "syncShouldUpdate",
    value: function syncShouldUpdate(shouldUpdate) {
      var _this2 = this;

      var old = this.state.shouldUpdate;
      if (shouldUpdate !== old) {
        var debounceShouldUpdate = this.props.debounceShouldUpdate;

        if (this._shouldUpdateTimeout) {
          clearTimeout(this._shouldUpdateTimeout);
        }
        if (shouldUpdate || debounceShouldUpdate <= 0) {
          this.setState({ shouldUpdate: shouldUpdate });
          return shouldUpdate;
        } else {
          this._shouldUpdateTimeout = setTimeout(function () {
            return _this2.setState({ shouldUpdate: shouldUpdate });
          }, this.props.debounceShouldUpdate);
        }
      }
      return old;
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _state = this.state;
      var frame = _state.frame;
      var frameId = _state.frameId;
      var framePendingLoad = _state.framePendingLoad;
      var _props = this.props;
      var children = _props.children;
      var shouldUpdate = _props.shouldUpdate;
      var maximumConcurrent = _props.maximumConcurrent;
      var style = _props.style;

      var rest = _objectWithoutProperties(_props, ["children", "shouldUpdate", "maximumConcurrent", "style"]);

      var surface = Children.only(children);
      (0, _invariant2.default)(children && children.type === _glReactDom.Surface, "GLStaticContainer `children` props must be a Surface. Got: %s", children && children.type);
      var surfaceProps = surface.props;
      var originalRef = surface.ref;
      var width = surfaceProps.width;
      var height = surfaceProps.height;


      var wrapperStyle = _extends({
        position: "relative"
      }, style, {
        width: width,
        height: height,
        overflow: "hidden"
      });

      var staticChildren = [];

      if (frame) {
        // Render the static content (captured frame)
        staticChildren.push(_react2.default.createElement("img", {
          style: {
            position: "absolute",
            top: 0,
            left: 0,
            width: width,
            height: height
          },
          src: frame,
          key: "img_" + frameId,
          onLoad: this.onFrameLoad
        }));
      }

      if (framePendingLoad || this.isRendering()) {
        // Render the Surface and captureFrame() it
        staticChildren.push(_react2.default.cloneElement(surface, _extends({}, surfaceProps, {
          style: _extends({}, surfaceProps.style || {}, {
            position: "absolute",
            top: 0,
            left: 0
          }),
          key: "canvas",
          ref: function ref(surface) {
            if (typeof originalRef === "function") originalRef(surface);
            _this3._surface = surface;
            if (surface) _this3.renderingCheckLoad();
          },
          onLoad: function onLoad() {
            if (surfaceProps.onLoad) surfaceProps.onLoad();
            _this3._loaded = true;
            _this3.renderingCheckLoad();
          }
        })));
      }

      return _react2.default.createElement(
        "div",
        _extends({}, rest, { style: wrapperStyle }),
        staticChildren
      );
    }
  }]);

  return GLStaticContainer;
}(Component);

GLStaticContainer.defaultProps = {
  shouldUpdate: false,
  maximumConcurrent: 8,
  timeout: 30,
  debounceShouldUpdate: 100
};

GLStaticContainer.propTypes = {
  shouldUpdate: PropTypes.bool,
  children: PropTypes.node.isRequired,
  maximumConcurrent: PropTypes.number,
  timeout: PropTypes.number,
  debounceShouldUpdate: PropTypes.number
};

module.exports = GLStaticContainer;
//# sourceMappingURL=GLStaticContainer.js.map